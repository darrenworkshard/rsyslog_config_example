###################################################################################################
#
# rsyslog.conf                                              Template Created By: 
#                                                                  Darren Fuller
# location   /etc/rsyslog/rsyslog.conf                             Splunk Professional Services                     
#                                                                  dfuller@splunk.com       
#     
# rsyslog config basically works in four parts: 
#
#   1)   Load modules that are required
#   2)   Create the templates for creating files
#   3)   Create the rulesets which are used by the various receivers
#   4)   Set the listeners
# 
#   Each section has a preamble that describes what is expected and what options are available. 
#
###################################################################################################



###################################################################################################
##                                                                                                  
##   Part 1: Load Modules and set global directives
##
##        Loading a module is done with the following syntax:
##
##             module(load("module_name") option=value option2=value )
##
###################################################################################################


module(load("imtcp"))
module(load("imudp"))
module(load="builtin:omfile"
    # Set the default permissions for all log files.
    fileOwner="splunk"
    fileGroup="splunk"
    dirOwner="splunk"
    dirGroup="splunk"
    fileCreateMode="0640"
    dirCreateMode="0755"
)

# set the work directory, this is where rsyslog writes spool and other work files
$WorkDirectory /var/spool/rsyslog

# AbortOnUncleanConfig says that if there is an error in the config file, the service will
# fail to start.  We do this so that errors in config do not get missed, which can cause 
# data loss. 
$AbortOnUncleanConfig on

  
###################################################################################################
###
###   Part 2: Create Templates
###
###################################################################################################

# One template for message output format.   in this case we are asking the system to output the raw 
# message as it was received.   This is the output for all messages 
template(name="outputformat_raw" type="string" string="%rawmsg%"  )
template(name="outputformat_514_Undefined" type="string" string="''''%msg%'''', ''''%syslogfacility%'''', ''''%HOSTNAME%'''', ''''%syslogpriority%'''', ''''%iut%'''', ''''%syslogtag%'''', ''''%programname%'''', ''''%procid%'''', ''''%rawmsg%''''")

# One template for each technology, stipulating the dynamic output file name format for each. 
template(name="dynafile_Bluecoat"          File="/splunk/log/bluecoat/%HOSTNAME%/bluecoat__%HOSTNAME%__%$YEAR%-%$MONTH%-%$DAY%.log"                    )
template(name="dynafile_chackpoint"        File="/splunk/log/checkpoint/%HOSTNAME%/checkpoint__%HOSTNAME%__%$YEAR%-%$MONTH%-%$DAY%.log"                )
template(name="dynafile_ciscoasa"          File="/splunk/log/ciscoasa/%HOSTNAME%/ciscoasa__%HOSTNAME%__%$YEAR%-%$MONTH%-%$DAY%.log"                    )
template(name="dynafile_citrixnetscaler"   File="/splunk/log/citrixnetscaler/%HOSTNAME%/citrixnetscaler__%HOSTNAME%__%$YEAR%-%$MONTH%-%$DAY%.log"      )
template(name="dynafile_emccentera"        File="/splunk/log/emccentera/%HOSTNAME%/emccentera__%HOSTNAME%__%$YEAR%-%$MONTH%-%$DAY%.log"                )
template(name="dynafile_emcdatadomain"     File="/splunk/log/emcdatadomain/%HOSTNAME%/emcdatadomain__%HOSTNAME%__%$YEAR%-%$MONTH%-%$DAY%.log"          )
template(name="dynafile_emcionix"          File="/splunk/log/emcionix/%HOSTNAME%/emcionix__%HOSTNAME%__%$YEAR%-%$MONTH%-%$DAY%.log"                    )
template(name="dynafile_emcsymmetrix"      File="/splunk/log/emcsymmetrix/%HOSTNAME%/emcsymmetrix__%HOSTNAME%__%$YEAR%-%$MONTH%-%$DAY%.log"            )
template(name="dynafile_f5"                File="/splunk/log/f5/%HOSTNAME%/f5__%HOSTNAME%__%$YEAR%-%$MONTH%-%$DAY%.log"                                )
template(name="dynafile_fabricos"          File="/splunk/log/fabricos/%HOSTNAME%/fabricos__%HOSTNAME%__%$YEAR%-%$MONTH%-%$DAY%.log"                    )
template(name="dynafile_infoblox"          File="/splunk/log/infoblox/%HOSTNAME%/infoblox__%HOSTNAME%__%$YEAR%-%$MONTH%-%$DAY%.log"                    )
template(name="dynafile_netapp"            File="/splunk/log/netapp/%HOSTNAME%/netapp__%HOSTNAME%__%$YEAR%-%$MONTH%-%$DAY%.log"                        )
template(name="dynafile_pgpuniversal"      File="/splunk/log/pgpuniversal/%HOSTNAME%/pgpuniversal__%HOSTNAME%__%$YEAR%-%$MONTH%-%$DAY%.log"            )
template(name="dynafile_riverbedsteelhead" File="/splunk/log/riverbedsteelhead/%HOSTNAME%/riverbedsteelhead__%HOSTNAME%__%$YEAR%-%$MONTH%-%$DAY%.log"  )
template(name="dynafile_rsaace"            File="/splunk/log/rsaace/%HOSTNAME%/rsaace__%HOSTNAME%__%$YEAR%-%$MONTH%-%$DAY%.log"                        )
template(name="dynafile_tripwire"          File="/splunk/log/tripwire/%HOSTNAME%/tripwire__%HOSTNAME%__%$YEAR%-%$MONTH%-%$DAY%.log"                    )
template(name="dynafile_vmwareesxi"        File="/splunk/log/vmwareesxi/%HOSTNAME%/vmwareesxi__%HOSTNAME%__%$YEAR%-%$MONTH%-%$DAY%.log"                )
template(name="dynafile_vmwarevcenter"     File="/splunk/log/vmwarevcenter/%HOSTNAME%/vmwarevcenter__%HOSTNAME%__%$YEAR%-%$MONTH%-%$DAY%.log"          )
template(name="dynafile_undefined"         File="/splunk/log/undefined/%HOSTNAME%/undefined__%HOSTNAME%__%$YEAR%-%$MONTH%-%$DAY%.log"                  )


###################################################################################################
####
####   Part 3: Create Rulesets:
####
####     Format here is  
####         ruleset(name="<TECHNOLOGY>"  ( action(type="omfile"  Template=outputformat_raw))) 	Dynafile=dynafile_<TECHNOLOGO>
####
####
###################################################################################################

ruleset(name="bluecoat")          {  action(type="omfile"  Template=outputformat_raw  DynaFile=dynafile_bluecoat			)  stop }
ruleset(name="checkpoint")        {  action(type="omfile"  Template=outputformat_raw  DynaFile=dynafile_checkpoint			)  stop }
ruleset(name="ciscoasa")          {  action(type="omfile"  Template=outputformat_raw  DynaFile=dynafile_ciscoasa			)  stop }
ruleset(name="citrixnetscaler")   {  action(type="omfile"  Template=outputformat_raw  DynaFile=dynafile_citrixnetscaler		)  stop }
ruleset(name="emccentera")        {  action(type="omfile"  Template=outputformat_raw  DynaFile=dynafile_emccentera			)  stop }
ruleset(name="emcdatadomain")     {  action(type="omfile"  Template=outputformat_raw  DynaFile=dynafile_emcdatadomain		)  stop }
ruleset(name="emcionix")          {  action(type="omfile"  Template=outputformat_raw  DynaFile=dynafile_emcionix			)  stop }
ruleset(name="emcsymmetrix")      {  action(type="omfile"  Template=outputformat_raw  DynaFile=dynafile_emcsymmetrix		)  stop }
ruleset(name="f5")                {  action(type="omfile"  Template=outputformat_raw  DynaFile=dynafile_f5					)  stop }
ruleset(name="fabricos")          {  action(type="omfile"  Template=outputformat_raw  DynaFile=dynafile_fabricos			)  stop }
ruleset(name="infoblox")          {  action(type="omfile"  Template=outputformat_raw  DynaFile=dynafile_infoblox			)  stop }
ruleset(name="netapp")            {  action(type="omfile"  Template=outputformat_raw  DynaFile=dynafile_netapp				)  stop }
ruleset(name="pgpuniversal")      {  action(type="omfile"  Template=outputformat_raw  DynaFile=dynafile_pgpuniversal		)  stop }
ruleset(name="riverbedsteelhead") {  action(type="omfile"  Template=outputformat_raw  DynaFile=dynafile_riverbedsteelhead	)  stop }
ruleset(name="rsaace")            {  action(type="omfile"  Template=outputformat_raw  DynaFile=dynafile_rsaace				)  stop }
ruleset(name="tripwire")          {  action(type="omfile"  Template=outputformat_raw  DynaFile=dynafile_tripwire			)  stop }
ruleset(name="vmwareesxi")        {  action(type="omfile"  Template=outputformat_raw  DynaFile=dynafile_vmwareesxi			)  stop }
ruleset(name="vmwarevcenter")     {  action(type="omfile"  Template=outputformat_raw  DynaFile=dynafile_vmwarevcenter		)  stop }

# for technologies that cannot write to port other than 514, we need to find something in the message
# that identifies the technology.    Use filters defined in the if..then..else below to define these 
# filter matches.    
#
# For the undefined host types, I used template outputformat_514_Undefined, which pastes out more
# fields from the syslog, which can be used to make your filter so that these devices can be 
# defined.
#
ruleset(name="fixedPortFilters")  {
	if $msg contains "stringx"      then { action  ( type=omfile  Template=outputformat_raw  DynaFile=dynafile_ciscoasa ) stop } 
	else if $msg contains "stringy" then { action  ( type=omfile  Template=outputformat_raw  DynaFile=dynafile_bluecoat ) stop }
	else if $msg contains "stringz" then { action  ( type=omfile  Template=outputformat_raw  DynaFile=dynafile_netapp   ) stop }
	else                                 { action  ( type=omfile  Template=outputformat_514_Undefined  DynaFile=dynafile_undefined) stop }
}


###################################################################################################
#####
#####   Part 4: Build listeners for each of the ports rsyslog is to open, and assign a ruleset
#####           to each listener
##### 
#####          	
#####
#####
###################################################################################################


# Technology Agnostic input ports on TCP/UDP port 514, for technologies that are unable to 
# specify a port in their syslog setup. 
input(type="imtcp" port="514" ruleset="fixedPortFilters")     # devices forces to stick to port 514
input(type="imudp" port="514" ruleset="fixedPortFilters")     # devices forces to stick to port 514

#Technoloy specific input ports for devices that are able to set a port and protocol. 
# remember to set imtcp or imudp as appropriate. 
input(type="imudp" port="10514" ruleset="bluecoat")             # bluecoat
input(type="imudp" port="10515" ruleset="checkpoint")           # checkpoint
input(type="imudp" port="10516" ruleset="ciscoasa")             # ciscoasa
input(type="imtcp" port="10517" ruleset="citrixnetscaler")      # citrixnetscaler
input(type="imtcp" port="10518" ruleset="emccentera")           # emccentera
input(type="imtcp" port="10519" ruleset="emcdatadomain")        # emcdatadomain
input(type="imtcp" port="10520" ruleset="emcionix")             # emcionix
input(type="imtcp" port="10521" ruleset="emcsymmetrix")         # emcsymmetrix
input(type="imudp" port="10522" ruleset="f5")                   # f5
input(type="imudp" port="10523" ruleset="fabricos")             # fabricos
input(type="imtcp" port="10524" ruleset="infoblox")             # infoblox
input(type="imtcp" port="10525" ruleset="netapp")               # netapp
input(type="imtcp" port="10526" ruleset="pgpuniversal")         # pgpuniversal
input(type="imudp" port="10527" ruleset="riverbedsteelhead")    # riverbedsteelhead
input(type="imudp" port="10528" ruleset="rsaace")               # rsaace
input(type="imudp" port="10529" ruleset="tripwire")             # tripwire
input(type="imtcp" port="10530" ruleset="vmwareesxi")           # vmwareesxi
input(type="imtcp" port="10531" ruleset="vmwarevcenter")        # vmwarevcenter

