###################################################################################################
#
# rsyslog config                                                    Template Created By:
#                                                                      Darren Fuller
# location   /etc/rsyslog.d/splunk.conf                                Splunk Professional Services
#            to be loaded by include in /etc/rsyslog/rsyslog.conf      dfuller@splunk.com
#
# rsyslog config basically works in four parts:
#
#   1)   Load modules that are required
#   2)   Create the templates for creating files
#   3)   Create the rulesets which are used by the various receivers
#   4)   Set the listeners
#
#   Each section has a preamble that describes what is expected and what options are available.
#
###################################################################################################



###################################################################################################
##
##   Part 1: Load Modules and set global directives
##
##        Loading a module is done with the following syntax:
##
##             module(load("module_name") option=value option2=value )
##
###################################################################################################

###     done in /etc/rsyslog.conf



###################################################################################################
###
###   Part 2: Create Templates
###
###################################################################################################

# One template for message output format.   in this case we are asking the system to output the raw
# message as it was received.   This is the output for all messages
template(name="outputformat_raw" type="string" string="%rawmsg%"  )
template(name="outputformat_514_Undefined" type="string" string="''''%msg%'''', ''''%syslogfacility%'''', ''''%HOSTNAME%'''', ''''%syslogpriority%'''', ''''%iut%'''', ''''%syslogtag%'''', ''''%programname%'''', ''''%PROCID%'''', ''''%rawmsg%'''', ''''%PRI%'''', ''''%APP-NAME%'''', ''''%MSGID%'''', ''''%STRUCTURED-DATA%''''   ")


# One template for each technology, stipulating the dynamic output file name format for each.
template(name="dynafile_bluecoat"          type="string" string="/splunk/log/bluecoat/%HOSTNAME%/bluecoat__%HOSTNAME%__%$YEAR%-%$MONTH%-%$DAY%.log"                    )
template(name="dynafile_checkpoint"        type="string" string="/splunk/log/checkpoint/%HOSTNAME%/checkpoint__%HOSTNAME%__%$YEAR%-%$MONTH%-%$DAY%.log"                )
template(name="dynafile_ciscoasa"          type="string" string="/splunk/log/ciscoasa/%HOSTNAME%/ciscoasa__%HOSTNAME%__%$YEAR%-%$MONTH%-%$DAY%.log"                    )
template(name="dynafile_citrixnetscaler"   type="string" string="/splunk/log/citrixnetscaler/%HOSTNAME%/citrixnetscaler__%HOSTNAME%__%$YEAR%-%$MONTH%-%$DAY%.log"      )
template(name="dynafile_emccentera"        type="string" string="/splunk/log/emccentera/%HOSTNAME%/emccentera__%HOSTNAME%__%$YEAR%-%$MONTH%-%$DAY%.log"                )
template(name="dynafile_emcdatadomain"     type="string" string="/splunk/log/emcdatadomain/%HOSTNAME%/emcdatadomain__%HOSTNAME%__%$YEAR%-%$MONTH%-%$DAY%.log"          )
template(name="dynafile_emcionix"          type="string" string="/splunk/log/emcionix/%HOSTNAME%/emcionix__%HOSTNAME%__%$YEAR%-%$MONTH%-%$DAY%.log"                    )
template(name="dynafile_emcsymmetrix"      type="string" string="/splunk/log/emcsymmetrix/%HOSTNAME%/emcsymmetrix__%HOSTNAME%__%$YEAR%-%$MONTH%-%$DAY%.log"            )
template(name="dynafile_f5"                type="string" string="/splunk/log/f5/%HOSTNAME%/f5__%HOSTNAME%__%$YEAR%-%$MONTH%-%$DAY%.log"                                )
template(name="dynafile_fabricos"          type="string" string="/splunk/log/fabricos/%HOSTNAME%/fabricos__%HOSTNAME%__%$YEAR%-%$MONTH%-%$DAY%.log"                    )
template(name="dynafile_infoblox"          type="string" string="/splunk/log/infoblox/%HOSTNAME%/infoblox__%HOSTNAME%__%$YEAR%-%$MONTH%-%$DAY%.log"                    )
template(name="dynafile_netapp"            type="string" string="/splunk/log/netapp/%HOSTNAME%/netapp__%HOSTNAME%__%$YEAR%-%$MONTH%-%$DAY%.log"                        )
template(name="dynafile_pgpuniversal"      type="string" string="/splunk/log/pgpuniversal/%HOSTNAME%/pgpuniversal__%HOSTNAME%__%$YEAR%-%$MONTH%-%$DAY%.log"            )
template(name="dynafile_riverbedsteelhead" type="string" string="/splunk/log/riverbedsteelhead/%HOSTNAME%/riverbedsteelhead__%HOSTNAME%__%$YEAR%-%$MONTH%-%$DAY%.log"  )
template(name="dynafile_rsaace"            type="string" string="/splunk/log/rsaace/%HOSTNAME%/rsaace__%HOSTNAME%__%$YEAR%-%$MONTH%-%$DAY%.log"                        )
template(name="dynafile_tripwire"          type="string" string="/splunk/log/tripwire/%HOSTNAME%/tripwire__%HOSTNAME%__%$YEAR%-%$MONTH%-%$DAY%.log"                    )
template(name="dynafile_vmwareesxi"        type="string" string="/splunk/log/vmwareesxi/%HOSTNAME%/vmwareesxi__%HOSTNAME%__%$YEAR%-%$MONTH%-%$DAY%.log"                )
template(name="dynafile_vmwarevcenter"     type="string" string="/splunk/log/vmwarevcenter/%HOSTNAME%/vmwarevcenter__%HOSTNAME%__%$YEAR%-%$MONTH%-%$DAY%.log"          )
template(name="dynafile_undefined"         type="string" string="/splunk/log/undefined/%HOSTNAME%/undefined__%HOSTNAME%__%$YEAR%-%$MONTH%-%$DAY%.log"                  )


###################################################################################################
####
####   Part 3: Create Rulesets:
####
####     Format here is
####         ruleset(name="<TECHNOLOGY>"  ( action(type="omfile"  Template=outputformat_raw)))  Dynafile=dynafile_<TECHNOLOGO>
####
####
###################################################################################################

ruleset(name="bluecoat") {
        action(type="omfile" template="outputformat_raw" dynaFile="dynafile_bluecoat")
        stop
}

ruleset(name="checkpoint") {
        action(type="omfile" template="outputformat_raw" dynaFile="dynafile_checkpoint")
        stop
}

ruleset(name="ciscoasa") {
        action(type="omfile" template="outputformat_raw" dynaFile="dynafile_ciscoasa")
        stop
}

ruleset(name="citrixnetscaler") {
        action(type="omfile" template="outputformat_raw" dynaFile="dynafile_citrixnetscaler")
        stop
}

ruleset(name="emccentera") {
        action(type="omfile" template="outputformat_raw" dynaFile="dynafile_emccentera" )
        stop
}

ruleset(name="emcdatadomain")     {
        action(type="omfile" template="outputformat_raw" dynaFile="dynafile_emcdatadomain")
        stop
}

ruleset(name="emcionix")          {
        action(type="omfile" template="outputformat_raw" dynaFile="dynafile_emcionix")
        stop
}

ruleset(name="emcsymmetrix")      {
        action(type="omfile" template="outputformat_raw" dynaFile="dynafile_emcsymmetrix")
        stop
}

ruleset(name="f5")                {
        action(type="omfile" template="outputformat_raw" dynaFile="dynafile_f5" )
        stop
}

ruleset(name="fabricos")          {
        action(type="omfile" template="outputformat_raw" dynaFile="dynafile_fabricos")
        stop
}

ruleset(name="infoblox")          {
        action(type="omfile" template="outputformat_raw" dynaFile="dynafile_infoblox")
        stop
}

ruleset(name="netapp")            {
        action(type="omfile" template="outputformat_raw" dynaFile="dynafile_netapp")
        stop
}

ruleset(name="pgpuniversal")      {
        action(type="omfile" template="outputformat_raw" dynaFile="dynafile_pgpuniversal")
        stop
}

ruleset(name="riverbedsteelhead") {
        action(type="omfile" template="outputformat_raw" dynaFile="dynafile_riverbedsteelhead"  )
        stop
}

ruleset(name="rsaace")            {
        action(type="omfile" template="outputformat_raw" dynaFile="dynafile_rsaace")
        stop
}

ruleset(name="tripwire")          {
        action(type="omfile" template="outputformat_raw" dynaFile="dynafile_tripwire")
        stop
}

ruleset(name="vmwareesxi")        {
        action(type="omfile" template="outputformat_raw" dynaFile="dynafile_vmwareesxi" )
        stop
}

ruleset(name="vmwarevcenter")     {
        action(type="omfile" template="outputformat_raw" dynaFile="dynafile_vmwarevcenter")
        stop
}


# for technologies that cannot write to port other than 514, we need to find something in the message
# that identifies the technology.    Use filters defined in the if..then..else below to define these
# filter matches.
#
# For the undefined host types, I used template outputformat_514_Undefined, which pastes out more
# fields from the syslog, which can be used to make your filter so that these devices can be
# defined.
#
ruleset(name="fixedPortFilters")  {
        if $msg contains "stringx"      then { action( type="omfile"  template="outputformat_raw"  dynaFile="dynafile_ciscoasa" ) stop }
        else if $msg contains "stringy" then { action( type="omfile"  template="outputformat_raw"  dynaFile="dynafile_bluecoat" ) stop }
        else if $msg contains "stringz" then { action( type="omfile"  template="outputformat_raw"  dynaFile="dynafile_netapp"   ) stop }
        else                                 { action( type="omfile"  template="outputformat_514_Undefined"  dynaFile="dynafile_undefined") stop }
}


###################################################################################################
#####
#####   Part 4: Build listeners for each of the ports rsyslog is to open, and assign a ruleset
#####           to each listener
#####
#####
#####
#####
###################################################################################################


# Technology Agnostic input ports on TCP/UDP port 514, for technologies that are unable to
# specify a port in their syslog setup.
input(type="imtcp" port="514" ruleset="fixedPortFilters")     # devices forces to stick to port 514
input(type="imudp" port="514" ruleset="fixedPortFilters")     # devices forces to stick to port 514

#Technoloy specific input ports for devices that are able to set a port and protocol.
# remember to set imtcp or imudp as appropriate.
input(type="imudp" port="10514" ruleset="bluecoat")             # bluecoat
input(type="imudp" port="10515" ruleset="checkpoint")           # checkpoint
input(type="imudp" port="10516" ruleset="ciscoasa")             # ciscoasa
input(type="imtcp" port="10517" ruleset="citrixnetscaler")      # citrixnetscaler
input(type="imtcp" port="10518" ruleset="emccentera")           # emccentera
input(type="imtcp" port="10519" ruleset="emcdatadomain")        # emcdatadomain
input(type="imtcp" port="10520" ruleset="emcionix")             # emcionix
input(type="imtcp" port="10521" ruleset="emcsymmetrix")         # emcsymmetrix
input(type="imudp" port="10522" ruleset="f5")                   # f5
input(type="imudp" port="10523" ruleset="fabricos")             # fabricos
input(type="imtcp" port="10524" ruleset="infoblox")             # infoblox
input(type="imtcp" port="10525" ruleset="netapp")               # netapp
input(type="imtcp" port="10526" ruleset="pgpuniversal")         # pgpuniversal
input(type="imudp" port="10527" ruleset="riverbedsteelhead")    # riverbedsteelhead
input(type="imudp" port="10528" ruleset="rsaace")               # rsaace
input(type="imudp" port="10529" ruleset="tripwire")             # tripwire
input(type="imtcp" port="10530" ruleset="vmwareesxi")           # vmwareesxi
input(type="imtcp" port="10531" ruleset="vmwarevcenter")        # vmwarevcenter
